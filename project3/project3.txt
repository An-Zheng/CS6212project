#include <stdio.h>     
#include <stdlib.h>    
#include <time.h>       
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <deque>
#include <vector>
#include <queue>
#include <string>
#include <cstring>
#include <map>
#include <stack>
#include <ctime>
#include <time.h>

using namespace std;
#define MAX_NUM 1000

void lcs(char* s1, char* s2, int m, int n)
{
    int L[MAX_NUM][MAX_NUM] = {};
    for (int i = 0; i <= m; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (s1[i - 1] == s2[j - 1])
                L[i][j] = L[i - 1][j - 1] + 1;
            else
                L[i][j] = max(L[i - 1][j], L[i][j - 1]);
        }
    }

    int index = L[m][n];
    char lcs[MAX_NUM];
    lcs[index] = '\0';
    int i = m, j = n;
    while (i > 0 && j > 0)
    {
        if (s1[i - 1] == s2[j - 1])
        {
            lcs[index - 1] = s1[i - 1];
            i--; j--; index--;    
        }
        else if (L[i - 1][j] > L[i][j - 1])
            i--;
        else
            j--;
    }
    cout << L[m][n] << endl;
    cout <<lcs<<endl;
}
#define M1 500
#define M2 500
int main()
{
    char s1[M1] = {};
    char s2[M2] = {};
    srand(time(NULL));
    for (int i = 0;i<M1-1;i++)
    {
        s1[i] = rand() % ('Z' - 'A' + 1) + 'A';      
    }
    for (int i = 0; i < M2-1; i++)
    {
        s2[i] = rand() % ('Z' - 'A' + 1) + 'A';      
    }


    int m = strlen(s1);
    int n = strlen(s2);
struct timespec time_start = { 0, 0 }, time_end = { 0, 0 };
clock_gettime(CLOCK_REALTIME, &time_start);
    lcs(s1, s2, m, n);
clock_gettime(CLOCK_REALTIME, &time_end);
   // printf("end   time %llus,%llu ns\n", time_end.tv_sec, time_end.tv_nsec);
    printf("duration:%llus %lluns\n", time_end.tv_sec - time_start.tv_sec, time_end.tv_nsec - time_start.tv_nsec);
    return 0;
}